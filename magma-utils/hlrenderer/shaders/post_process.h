#pragma once

#include <stdint.h>

static const uint32_t post_process_spirv_vert[] = {
	0x07230203,0x00010000,0x0008000b,0x00000032,0x00000000,0x00020011,0x00000001,0x0006000b,
	0x00000001,0x4c534c47,0x6474732e,0x3035342e,0x00000000,0x0003000e,0x00000000,0x00000001,
	0x0008000f,0x00000000,0x00000004,0x6e69616d,0x00000000,0x0000000d,0x0000001b,0x00000029,
	0x00030003,0x00000002,0x000001c2,0x00040005,0x00000004,0x6e69616d,0x00000000,0x00060005,
	0x0000000b,0x505f6c67,0x65567265,0x78657472,0x00000000,0x00060006,0x0000000b,0x00000000,
	0x505f6c67,0x7469736f,0x006e6f69,0x00070006,0x0000000b,0x00000001,0x505f6c67,0x746e696f,
	0x657a6953,0x00000000,0x00070006,0x0000000b,0x00000002,0x435f6c67,0x4470696c,0x61747369,
	0x0065636e,0x00070006,0x0000000b,0x00000003,0x435f6c67,0x446c6c75,0x61747369,0x0065636e,
	0x00030005,0x0000000d,0x00000000,0x00060005,0x0000001b,0x565f6c67,0x65747265,0x646e4978,
	0x00007865,0x00050005,0x0000001e,0x65646e69,0x6c626178,0x00000065,0x00060005,0x00000029,
	0x67617266,0x7865745f,0x6f6f635f,0x00006472,0x00050005,0x0000002f,0x65646e69,0x6c626178,
	0x00000065,0x00050048,0x0000000b,0x00000000,0x0000000b,0x00000000,0x00050048,0x0000000b,
	0x00000001,0x0000000b,0x00000001,0x00050048,0x0000000b,0x00000002,0x0000000b,0x00000003,
	0x00050048,0x0000000b,0x00000003,0x0000000b,0x00000004,0x00030047,0x0000000b,0x00000002,
	0x00040047,0x0000001b,0x0000000b,0x0000002a,0x00040047,0x00000029,0x0000001e,0x00000000,
	0x00020013,0x00000002,0x00030021,0x00000003,0x00000002,0x00030016,0x00000006,0x00000020,
	0x00040017,0x00000007,0x00000006,0x00000004,0x00040015,0x00000008,0x00000020,0x00000000,
	0x0004002b,0x00000008,0x00000009,0x00000001,0x0004001c,0x0000000a,0x00000006,0x00000009,
	0x0006001e,0x0000000b,0x00000007,0x00000006,0x0000000a,0x0000000a,0x00040020,0x0000000c,
	0x00000003,0x0000000b,0x0004003b,0x0000000c,0x0000000d,0x00000003,0x00040015,0x0000000e,
	0x00000020,0x00000001,0x0004002b,0x0000000e,0x0000000f,0x00000000,0x00040017,0x00000010,
	0x00000006,0x00000002,0x0004002b,0x00000008,0x00000011,0x00000004,0x0004001c,0x00000012,
	0x00000010,0x00000011,0x0004002b,0x00000006,0x00000013,0xbf800000,0x0005002c,0x00000010,
	0x00000014,0x00000013,0x00000013,0x0004002b,0x00000006,0x00000015,0x3f800000,0x0005002c,
	0x00000010,0x00000016,0x00000015,0x00000013,0x0005002c,0x00000010,0x00000017,0x00000013,
	0x00000015,0x0005002c,0x00000010,0x00000018,0x00000015,0x00000015,0x0007002c,0x00000012,
	0x00000019,0x00000014,0x00000016,0x00000017,0x00000018,0x00040020,0x0000001a,0x00000001,
	0x0000000e,0x0004003b,0x0000001a,0x0000001b,0x00000001,0x00040020,0x0000001d,0x00000007,
	0x00000012,0x00040020,0x0000001f,0x00000007,0x00000010,0x0004002b,0x00000006,0x00000022,
	0x00000000,0x00040020,0x00000026,0x00000003,0x00000007,0x00040020,0x00000028,0x00000003,
	0x00000010,0x0004003b,0x00000028,0x00000029,0x00000003,0x0005002c,0x00000010,0x0000002a,
	0x00000022,0x00000022,0x0005002c,0x00000010,0x0000002b,0x00000015,0x00000022,0x0005002c,
	0x00000010,0x0000002c,0x00000022,0x00000015,0x0007002c,0x00000012,0x0000002d,0x0000002a,
	0x0000002b,0x0000002c,0x00000018,0x00050036,0x00000002,0x00000004,0x00000000,0x00000003,
	0x000200f8,0x00000005,0x0004003b,0x0000001d,0x0000001e,0x00000007,0x0004003b,0x0000001d,
	0x0000002f,0x00000007,0x0004003d,0x0000000e,0x0000001c,0x0000001b,0x0003003e,0x0000001e,
	0x00000019,0x00050041,0x0000001f,0x00000020,0x0000001e,0x0000001c,0x0004003d,0x00000010,
	0x00000021,0x00000020,0x00050051,0x00000006,0x00000023,0x00000021,0x00000000,0x00050051,
	0x00000006,0x00000024,0x00000021,0x00000001,0x00070050,0x00000007,0x00000025,0x00000023,
	0x00000024,0x00000022,0x00000015,0x00050041,0x00000026,0x00000027,0x0000000d,0x0000000f,
	0x0003003e,0x00000027,0x00000025,0x0004003d,0x0000000e,0x0000002e,0x0000001b,0x0003003e,
	0x0000002f,0x0000002d,0x00050041,0x0000001f,0x00000030,0x0000002f,0x0000002e,0x0004003d,
	0x00000010,0x00000031,0x00000030,0x0003003e,0x00000029,0x00000031,0x000100fd,0x00010038
};

static const uint32_t post_process_spirv_frag[] = {
	0x07230203,0x00010000,0x0008000b,0x0000004c,0x00000000,0x00020011,0x00000001,0x0006000b,
	0x00000001,0x4c534c47,0x6474732e,0x3035342e,0x00000000,0x0003000e,0x00000000,0x00000001,
	0x0007000f,0x00000004,0x00000004,0x6e69616d,0x00000000,0x0000000b,0x00000046,0x00030010,
	0x00000004,0x00000007,0x00030003,0x00000002,0x000001c2,0x00040005,0x00000004,0x6e69616d,
	0x00000000,0x00030005,0x00000009,0x00007675,0x00060005,0x0000000b,0x67617266,0x7865745f,
	0x6f6f635f,0x00006472,0x00040005,0x0000000f,0x6f6c6f63,0x00000072,0x00050005,0x00000013,
	0x5f786574,0x706d6173,0x0072656c,0x00060005,0x0000001a,0x74736f50,0x636f7250,0x44737365,
	0x00617461,0x00070006,0x0000001a,0x00000000,0x6e676976,0x65747465,0x7461645f,0x00000061,
	0x00070006,0x0000001a,0x00000001,0x62616e65,0x765f656c,0x656e6769,0x00657474,0x00030005,
	0x0000001c,0x00000000,0x00050005,0x00000027,0x746e6563,0x64657265,0x0076755f,0x00040005,
	0x0000002d,0x74736964,0x00000000,0x00050005,0x00000030,0x6e676976,0x65747465,0x00000000,
	0x00040005,0x00000034,0x74636166,0x0000726f,0x00050005,0x00000046,0x5f74756f,0x6f6c6f63,
	0x00000072,0x00040047,0x0000000b,0x0000001e,0x00000000,0x00040047,0x00000013,0x00000022,
	0x00000001,0x00040047,0x00000013,0x00000021,0x00000000,0x00050048,0x0000001a,0x00000000,
	0x00000023,0x00000000,0x00050048,0x0000001a,0x00000001,0x00000023,0x00000010,0x00030047,
	0x0000001a,0x00000002,0x00040047,0x0000001c,0x00000022,0x00000000,0x00040047,0x0000001c,
	0x00000021,0x00000000,0x00040047,0x00000046,0x0000001e,0x00000000,0x00020013,0x00000002,
	0x00030021,0x00000003,0x00000002,0x00030016,0x00000006,0x00000020,0x00040017,0x00000007,
	0x00000006,0x00000002,0x00040020,0x00000008,0x00000007,0x00000007,0x00040020,0x0000000a,
	0x00000001,0x00000007,0x0004003b,0x0000000a,0x0000000b,0x00000001,0x00040017,0x0000000d,
	0x00000006,0x00000003,0x00040020,0x0000000e,0x00000007,0x0000000d,0x00090019,0x00000010,
	0x00000006,0x00000001,0x00000000,0x00000000,0x00000000,0x00000001,0x00000000,0x0003001b,
	0x00000011,0x00000010,0x00040020,0x00000012,0x00000000,0x00000011,0x0004003b,0x00000012,
	0x00000013,0x00000000,0x00040017,0x00000016,0x00000006,0x00000004,0x00040015,0x00000019,
	0x00000020,0x00000000,0x0004001e,0x0000001a,0x00000016,0x00000019,0x00040020,0x0000001b,
	0x00000002,0x0000001a,0x0004003b,0x0000001b,0x0000001c,0x00000002,0x00040015,0x0000001d,
	0x00000020,0x00000001,0x0004002b,0x0000001d,0x0000001e,0x00000001,0x00040020,0x0000001f,
	0x00000002,0x00000019,0x00020014,0x00000022,0x0004002b,0x00000019,0x00000023,0x00000000,
	0x0004002b,0x00000006,0x00000029,0x3f000000,0x0005002c,0x00000007,0x0000002a,0x00000029,
	0x00000029,0x00040020,0x0000002c,0x00000007,0x00000006,0x0004002b,0x00000006,0x00000031,
	0x3f333333,0x0004002b,0x00000006,0x00000035,0x3f800000,0x0004002b,0x0000001d,0x00000037,
	0x00000000,0x0004002b,0x00000019,0x00000038,0x00000003,0x00040020,0x00000039,0x00000002,
	0x00000006,0x00040020,0x0000003d,0x00000002,0x00000016,0x00040020,0x00000045,0x00000003,
	0x00000016,0x0004003b,0x00000045,0x00000046,0x00000003,0x00050036,0x00000002,0x00000004,
	0x00000000,0x00000003,0x000200f8,0x00000005,0x0004003b,0x00000008,0x00000009,0x00000007,
	0x0004003b,0x0000000e,0x0000000f,0x00000007,0x0004003b,0x00000008,0x00000027,0x00000007,
	0x0004003b,0x0000002c,0x0000002d,0x00000007,0x0004003b,0x0000002c,0x00000030,0x00000007,
	0x0004003b,0x0000002c,0x00000034,0x00000007,0x0004003d,0x00000007,0x0000000c,0x0000000b,
	0x0003003e,0x00000009,0x0000000c,0x0004003d,0x00000011,0x00000014,0x00000013,0x0004003d,
	0x00000007,0x00000015,0x00000009,0x00050057,0x00000016,0x00000017,0x00000014,0x00000015,
	0x0008004f,0x0000000d,0x00000018,0x00000017,0x00000017,0x00000000,0x00000001,0x00000002,
	0x0003003e,0x0000000f,0x00000018,0x00050041,0x0000001f,0x00000020,0x0000001c,0x0000001e,
	0x0004003d,0x00000019,0x00000021,0x00000020,0x000500ab,0x00000022,0x00000024,0x00000021,
	0x00000023,0x000300f7,0x00000026,0x00000000,0x000400fa,0x00000024,0x00000025,0x00000026,
	0x000200f8,0x00000025,0x0004003d,0x00000007,0x00000028,0x00000009,0x00050083,0x00000007,
	0x0000002b,0x00000028,0x0000002a,0x0003003e,0x00000027,0x0000002b,0x0004003d,0x00000007,
	0x0000002e,0x00000027,0x0006000c,0x00000006,0x0000002f,0x00000001,0x00000042,0x0000002e,
	0x0003003e,0x0000002d,0x0000002f,0x0004003d,0x00000006,0x00000032,0x0000002d,0x0008000c,
	0x00000006,0x00000033,0x00000001,0x00000031,0x00000031,0x00000029,0x00000032,0x0003003e,
	0x00000030,0x00000033,0x0004003d,0x00000006,0x00000036,0x00000030,0x00060041,0x00000039,
	0x0000003a,0x0000001c,0x00000037,0x00000038,0x0004003d,0x00000006,0x0000003b,0x0000003a,
	0x0008000c,0x00000006,0x0000003c,0x00000001,0x0000002e,0x00000035,0x00000036,0x0000003b,
	0x0003003e,0x00000034,0x0000003c,0x00050041,0x0000003d,0x0000003e,0x0000001c,0x00000037,
	0x0004003d,0x00000016,0x0000003f,0x0000003e,0x0008004f,0x0000000d,0x00000040,0x0000003f,
	0x0000003f,0x00000000,0x00000001,0x00000002,0x0004003d,0x0000000d,0x00000041,0x0000000f,
	0x0004003d,0x00000006,0x00000042,0x00000034,0x00060050,0x0000000d,0x00000043,0x00000042,
	0x00000042,0x00000042,0x0008000c,0x0000000d,0x00000044,0x00000001,0x0000002e,0x00000040,
	0x00000041,0x00000043,0x0003003e,0x0000000f,0x00000044,0x000200f9,0x00000026,0x000200f8,
	0x00000026,0x0004003d,0x0000000d,0x00000047,0x0000000f,0x00050051,0x00000006,0x00000048,
	0x00000047,0x00000000,0x00050051,0x00000006,0x00000049,0x00000047,0x00000001,0x00050051,
	0x00000006,0x0000004a,0x00000047,0x00000002,0x00070050,0x00000016,0x0000004b,0x00000048,
	0x00000049,0x0000004a,0x00000035,0x0003003e,0x00000046,0x0000004b,0x000100fd,0x00010038
};

/*
#version 450

const vec2 _25[4] = vec2[](vec2(-1.0), vec2(1.0, -1.0), vec2(-1.0, 1.0), vec2(1.0));
const vec2 _45[4] = vec2[](vec2(0.0), vec2(1.0, 0.0), vec2(0.0, 1.0), vec2(1.0));

layout(location = 0) out vec2 frag_tex_coord;

void main()
{
    gl_Position = vec4(_25[gl_VertexID], 0.0, 1.0);
    frag_tex_coord = _45[gl_VertexID];
}

*/
static const uint8_t post_process_glsl_vert[] = {
	0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x34,0x35,0x30,0x0a,0x0a,0x63,0x6f,
	0x6e,0x73,0x74,0x20,0x76,0x65,0x63,0x32,0x20,0x5f,0x32,0x35,0x5b,0x34,0x5d,0x20,
	0x3d,0x20,0x76,0x65,0x63,0x32,0x5b,0x5d,0x28,0x76,0x65,0x63,0x32,0x28,0x2d,0x31,
	0x2e,0x30,0x29,0x2c,0x20,0x76,0x65,0x63,0x32,0x28,0x31,0x2e,0x30,0x2c,0x20,0x2d,
	0x31,0x2e,0x30,0x29,0x2c,0x20,0x76,0x65,0x63,0x32,0x28,0x2d,0x31,0x2e,0x30,0x2c,
	0x20,0x31,0x2e,0x30,0x29,0x2c,0x20,0x76,0x65,0x63,0x32,0x28,0x31,0x2e,0x30,0x29,
	0x29,0x3b,0x0a,0x63,0x6f,0x6e,0x73,0x74,0x20,0x76,0x65,0x63,0x32,0x20,0x5f,0x34,
	0x35,0x5b,0x34,0x5d,0x20,0x3d,0x20,0x76,0x65,0x63,0x32,0x5b,0x5d,0x28,0x76,0x65,
	0x63,0x32,0x28,0x30,0x2e,0x30,0x29,0x2c,0x20,0x76,0x65,0x63,0x32,0x28,0x31,0x2e,
	0x30,0x2c,0x20,0x30,0x2e,0x30,0x29,0x2c,0x20,0x76,0x65,0x63,0x32,0x28,0x30,0x2e,
	0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x2c,0x20,0x76,0x65,0x63,0x32,0x28,0x31,0x2e,
	0x30,0x29,0x29,0x3b,0x0a,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,
	0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,0x75,0x74,0x20,0x76,
	0x65,0x63,0x32,0x20,0x66,0x72,0x61,0x67,0x5f,0x74,0x65,0x78,0x5f,0x63,0x6f,0x6f,
	0x72,0x64,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,
	0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,
	0x6f,0x6e,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x5f,0x32,0x35,0x5b,0x67,0x6c,
	0x5f,0x56,0x65,0x72,0x74,0x65,0x78,0x49,0x44,0x5d,0x2c,0x20,0x30,0x2e,0x30,0x2c,
	0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,
	0x74,0x65,0x78,0x5f,0x63,0x6f,0x6f,0x72,0x64,0x20,0x3d,0x20,0x5f,0x34,0x35,0x5b,
	0x67,0x6c,0x5f,0x56,0x65,0x72,0x74,0x65,0x78,0x49,0x44,0x5d,0x3b,0x0a,0x7d,0x0a,
	0x0a
};

/*
#version 450

layout(binding = 0, std140) uniform PostProcessData
{
    vec4 vignette_data;
    uint enable_vignette;
} _28;

layout(binding = 0) uniform sampler2D tex_sampler;

layout(location = 0) in vec2 frag_tex_coord;
layout(location = 0) out vec4 out_color;

void main()
{
    vec2 uv = frag_tex_coord;
    vec3 color = texture(tex_sampler, uv).xyz;
    if (_28.enable_vignette != 0u)
    {
        vec2 centered_uv = uv - vec2(0.5);
        float dist = length(centered_uv);
        float vignette = smoothstep(0.699999988079071044921875, 0.5, dist);
        float factor = mix(1.0, vignette, _28.vignette_data.w);
        color = mix(_28.vignette_data.xyz, color, vec3(factor));
    }
    out_color = vec4(color, 1.0);
}

*/
static const uint8_t post_process_glsl_frag[] = {
	0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x34,0x35,0x30,0x0a,0x0a,0x6c,0x61,
	0x79,0x6f,0x75,0x74,0x28,0x62,0x69,0x6e,0x64,0x69,0x6e,0x67,0x20,0x3d,0x20,0x30,
	0x2c,0x20,0x73,0x74,0x64,0x31,0x34,0x30,0x29,0x20,0x75,0x6e,0x69,0x66,0x6f,0x72,
	0x6d,0x20,0x50,0x6f,0x73,0x74,0x50,0x72,0x6f,0x63,0x65,0x73,0x73,0x44,0x61,0x74,
	0x61,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x34,0x20,0x76,0x69,0x67,
	0x6e,0x65,0x74,0x74,0x65,0x5f,0x64,0x61,0x74,0x61,0x3b,0x0a,0x20,0x20,0x20,0x20,
	0x75,0x69,0x6e,0x74,0x20,0x65,0x6e,0x61,0x62,0x6c,0x65,0x5f,0x76,0x69,0x67,0x6e,
	0x65,0x74,0x74,0x65,0x3b,0x0a,0x7d,0x20,0x5f,0x32,0x38,0x3b,0x0a,0x0a,0x6c,0x61,
	0x79,0x6f,0x75,0x74,0x28,0x62,0x69,0x6e,0x64,0x69,0x6e,0x67,0x20,0x3d,0x20,0x30,
	0x29,0x20,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,
	0x72,0x32,0x44,0x20,0x74,0x65,0x78,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x3b,
	0x0a,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,
	0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x66,
	0x72,0x61,0x67,0x5f,0x74,0x65,0x78,0x5f,0x63,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x6c,
	0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,
	0x20,0x30,0x29,0x20,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x34,0x20,0x6f,0x75,0x74,
	0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,
	0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x32,0x20,
	0x75,0x76,0x20,0x3d,0x20,0x66,0x72,0x61,0x67,0x5f,0x74,0x65,0x78,0x5f,0x63,0x6f,
	0x6f,0x72,0x64,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x63,0x6f,
	0x6c,0x6f,0x72,0x20,0x3d,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x74,0x65,
	0x78,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x2c,0x20,0x75,0x76,0x29,0x2e,0x78,
	0x79,0x7a,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x32,0x38,0x2e,
	0x65,0x6e,0x61,0x62,0x6c,0x65,0x5f,0x76,0x69,0x67,0x6e,0x65,0x74,0x74,0x65,0x20,
	0x21,0x3d,0x20,0x30,0x75,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,
	0x20,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x32,0x20,0x63,0x65,0x6e,0x74,0x65,0x72,
	0x65,0x64,0x5f,0x75,0x76,0x20,0x3d,0x20,0x75,0x76,0x20,0x2d,0x20,0x76,0x65,0x63,
	0x32,0x28,0x30,0x2e,0x35,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
	0x66,0x6c,0x6f,0x61,0x74,0x20,0x64,0x69,0x73,0x74,0x20,0x3d,0x20,0x6c,0x65,0x6e,
	0x67,0x74,0x68,0x28,0x63,0x65,0x6e,0x74,0x65,0x72,0x65,0x64,0x5f,0x75,0x76,0x29,
	0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,
	0x76,0x69,0x67,0x6e,0x65,0x74,0x74,0x65,0x20,0x3d,0x20,0x73,0x6d,0x6f,0x6f,0x74,
	0x68,0x73,0x74,0x65,0x70,0x28,0x30,0x2e,0x36,0x39,0x39,0x39,0x39,0x39,0x39,0x38,
	0x38,0x30,0x37,0x39,0x30,0x37,0x31,0x30,0x34,0x34,0x39,0x32,0x31,0x38,0x37,0x35,
	0x2c,0x20,0x30,0x2e,0x35,0x2c,0x20,0x64,0x69,0x73,0x74,0x29,0x3b,0x0a,0x20,0x20,
	0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x66,0x61,0x63,0x74,
	0x6f,0x72,0x20,0x3d,0x20,0x6d,0x69,0x78,0x28,0x31,0x2e,0x30,0x2c,0x20,0x76,0x69,
	0x67,0x6e,0x65,0x74,0x74,0x65,0x2c,0x20,0x5f,0x32,0x38,0x2e,0x76,0x69,0x67,0x6e,
	0x65,0x74,0x74,0x65,0x5f,0x64,0x61,0x74,0x61,0x2e,0x77,0x29,0x3b,0x0a,0x20,0x20,
	0x20,0x20,0x20,0x20,0x20,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x6d,0x69,
	0x78,0x28,0x5f,0x32,0x38,0x2e,0x76,0x69,0x67,0x6e,0x65,0x74,0x74,0x65,0x5f,0x64,
	0x61,0x74,0x61,0x2e,0x78,0x79,0x7a,0x2c,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x2c,0x20,
	0x76,0x65,0x63,0x33,0x28,0x66,0x61,0x63,0x74,0x6f,0x72,0x29,0x29,0x3b,0x0a,0x20,
	0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x5f,0x63,0x6f,0x6c,
	0x6f,0x72,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x63,0x6f,0x6c,0x6f,0x72,0x2c,
	0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x7d,0x0a,0x0a
};

/*
#version 300 es

const vec2 _25[4] = vec2[](vec2(-1.0), vec2(1.0, -1.0), vec2(-1.0, 1.0), vec2(1.0));
const vec2 _45[4] = vec2[](vec2(0.0), vec2(1.0, 0.0), vec2(0.0, 1.0), vec2(1.0));

out vec2 frag_tex_coord;

void main()
{
    gl_Position = vec4(_25[gl_VertexID], 0.0, 1.0);
    frag_tex_coord = _45[gl_VertexID];
}

*/
static const uint8_t post_process_glsles_vert[] = {
	0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x30,0x30,0x20,0x65,0x73,0x0a,
	0x0a,0x63,0x6f,0x6e,0x73,0x74,0x20,0x76,0x65,0x63,0x32,0x20,0x5f,0x32,0x35,0x5b,
	0x34,0x5d,0x20,0x3d,0x20,0x76,0x65,0x63,0x32,0x5b,0x5d,0x28,0x76,0x65,0x63,0x32,
	0x28,0x2d,0x31,0x2e,0x30,0x29,0x2c,0x20,0x76,0x65,0x63,0x32,0x28,0x31,0x2e,0x30,
	0x2c,0x20,0x2d,0x31,0x2e,0x30,0x29,0x2c,0x20,0x76,0x65,0x63,0x32,0x28,0x2d,0x31,
	0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x2c,0x20,0x76,0x65,0x63,0x32,0x28,0x31,
	0x2e,0x30,0x29,0x29,0x3b,0x0a,0x63,0x6f,0x6e,0x73,0x74,0x20,0x76,0x65,0x63,0x32,
	0x20,0x5f,0x34,0x35,0x5b,0x34,0x5d,0x20,0x3d,0x20,0x76,0x65,0x63,0x32,0x5b,0x5d,
	0x28,0x76,0x65,0x63,0x32,0x28,0x30,0x2e,0x30,0x29,0x2c,0x20,0x76,0x65,0x63,0x32,
	0x28,0x31,0x2e,0x30,0x2c,0x20,0x30,0x2e,0x30,0x29,0x2c,0x20,0x76,0x65,0x63,0x32,
	0x28,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x2c,0x20,0x76,0x65,0x63,0x32,
	0x28,0x31,0x2e,0x30,0x29,0x29,0x3b,0x0a,0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,
	0x32,0x20,0x66,0x72,0x61,0x67,0x5f,0x74,0x65,0x78,0x5f,0x63,0x6f,0x6f,0x72,0x64,
	0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,
	0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,
	0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x5f,0x32,0x35,0x5b,0x67,0x6c,0x5f,0x56,
	0x65,0x72,0x74,0x65,0x78,0x49,0x44,0x5d,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,
	0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x74,0x65,
	0x78,0x5f,0x63,0x6f,0x6f,0x72,0x64,0x20,0x3d,0x20,0x5f,0x34,0x35,0x5b,0x67,0x6c,
	0x5f,0x56,0x65,0x72,0x74,0x65,0x78,0x49,0x44,0x5d,0x3b,0x0a,0x7d,0x0a,0x0a
};

/*
#version 300 es
precision mediump float;
precision highp int;

layout(std140) uniform PostProcessData
{
    highp vec4 vignette_data;
    uint enable_vignette;
} _28;

uniform highp sampler2D tex_sampler;

in highp vec2 frag_tex_coord;
layout(location = 0) out highp vec4 out_color;

void main()
{
    highp vec2 uv = frag_tex_coord;
    highp vec3 color = texture(tex_sampler, uv).xyz;
    if (_28.enable_vignette != 0u)
    {
        highp vec2 centered_uv = uv - vec2(0.5);
        highp float dist = length(centered_uv);
        highp float vignette = smoothstep(0.699999988079071044921875, 0.5, dist);
        highp float factor = mix(1.0, vignette, _28.vignette_data.w);
        color = mix(_28.vignette_data.xyz, color, vec3(factor));
    }
    out_color = vec4(color, 1.0);
}

*/
static const uint8_t post_process_glsles_frag[] = {
	0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x30,0x30,0x20,0x65,0x73,0x0a,
	0x70,0x72,0x65,0x63,0x69,0x73,0x69,0x6f,0x6e,0x20,0x6d,0x65,0x64,0x69,0x75,0x6d,
	0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x3b,0x0a,0x70,0x72,0x65,0x63,0x69,0x73,0x69,
	0x6f,0x6e,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x69,0x6e,0x74,0x3b,0x0a,0x0a,0x6c,
	0x61,0x79,0x6f,0x75,0x74,0x28,0x73,0x74,0x64,0x31,0x34,0x30,0x29,0x20,0x75,0x6e,
	0x69,0x66,0x6f,0x72,0x6d,0x20,0x50,0x6f,0x73,0x74,0x50,0x72,0x6f,0x63,0x65,0x73,
	0x73,0x44,0x61,0x74,0x61,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,
	0x70,0x20,0x76,0x65,0x63,0x34,0x20,0x76,0x69,0x67,0x6e,0x65,0x74,0x74,0x65,0x5f,
	0x64,0x61,0x74,0x61,0x3b,0x0a,0x20,0x20,0x20,0x20,0x75,0x69,0x6e,0x74,0x20,0x65,
	0x6e,0x61,0x62,0x6c,0x65,0x5f,0x76,0x69,0x67,0x6e,0x65,0x74,0x74,0x65,0x3b,0x0a,
	0x7d,0x20,0x5f,0x32,0x38,0x3b,0x0a,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,
	0x68,0x69,0x67,0x68,0x70,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,
	0x74,0x65,0x78,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x3b,0x0a,0x0a,0x69,0x6e,
	0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x32,0x20,0x66,0x72,0x61,0x67,
	0x5f,0x74,0x65,0x78,0x5f,0x63,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x6c,0x61,0x79,0x6f,
	0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,
	0x20,0x6f,0x75,0x74,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x34,0x20,
	0x6f,0x75,0x74,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,
	0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,
	0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x32,0x20,0x75,0x76,0x20,0x3d,0x20,0x66,0x72,
	0x61,0x67,0x5f,0x74,0x65,0x78,0x5f,0x63,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x20,0x20,
	0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x33,0x20,0x63,0x6f,0x6c,
	0x6f,0x72,0x20,0x3d,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x74,0x65,0x78,
	0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x2c,0x20,0x75,0x76,0x29,0x2e,0x78,0x79,
	0x7a,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x32,0x38,0x2e,0x65,
	0x6e,0x61,0x62,0x6c,0x65,0x5f,0x76,0x69,0x67,0x6e,0x65,0x74,0x74,0x65,0x20,0x21,
	0x3d,0x20,0x30,0x75,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,
	0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x32,0x20,0x63,
	0x65,0x6e,0x74,0x65,0x72,0x65,0x64,0x5f,0x75,0x76,0x20,0x3d,0x20,0x75,0x76,0x20,
	0x2d,0x20,0x76,0x65,0x63,0x32,0x28,0x30,0x2e,0x35,0x29,0x3b,0x0a,0x20,0x20,0x20,
	0x20,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,
	0x20,0x64,0x69,0x73,0x74,0x20,0x3d,0x20,0x6c,0x65,0x6e,0x67,0x74,0x68,0x28,0x63,
	0x65,0x6e,0x74,0x65,0x72,0x65,0x64,0x5f,0x75,0x76,0x29,0x3b,0x0a,0x20,0x20,0x20,
	0x20,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,
	0x20,0x76,0x69,0x67,0x6e,0x65,0x74,0x74,0x65,0x20,0x3d,0x20,0x73,0x6d,0x6f,0x6f,
	0x74,0x68,0x73,0x74,0x65,0x70,0x28,0x30,0x2e,0x36,0x39,0x39,0x39,0x39,0x39,0x39,
	0x38,0x38,0x30,0x37,0x39,0x30,0x37,0x31,0x30,0x34,0x34,0x39,0x32,0x31,0x38,0x37,
	0x35,0x2c,0x20,0x30,0x2e,0x35,0x2c,0x20,0x64,0x69,0x73,0x74,0x29,0x3b,0x0a,0x20,
	0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,
	0x61,0x74,0x20,0x66,0x61,0x63,0x74,0x6f,0x72,0x20,0x3d,0x20,0x6d,0x69,0x78,0x28,
	0x31,0x2e,0x30,0x2c,0x20,0x76,0x69,0x67,0x6e,0x65,0x74,0x74,0x65,0x2c,0x20,0x5f,
	0x32,0x38,0x2e,0x76,0x69,0x67,0x6e,0x65,0x74,0x74,0x65,0x5f,0x64,0x61,0x74,0x61,
	0x2e,0x77,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x63,0x6f,0x6c,
	0x6f,0x72,0x20,0x3d,0x20,0x6d,0x69,0x78,0x28,0x5f,0x32,0x38,0x2e,0x76,0x69,0x67,
	0x6e,0x65,0x74,0x74,0x65,0x5f,0x64,0x61,0x74,0x61,0x2e,0x78,0x79,0x7a,0x2c,0x20,
	0x63,0x6f,0x6c,0x6f,0x72,0x2c,0x20,0x76,0x65,0x63,0x33,0x28,0x66,0x61,0x63,0x74,
	0x6f,0x72,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,
	0x6f,0x75,0x74,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,
	0x28,0x63,0x6f,0x6c,0x6f,0x72,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x7d,0x0a,
	0x0a
};

/*
static const float2 _25[4] = { (-1.0f).xx, float2(1.0f, -1.0f), float2(-1.0f, 1.0f), 1.0f.xx };
static const float2 _45[4] = { 0.0f.xx, float2(1.0f, 0.0f), float2(0.0f, 1.0f), 1.0f.xx };

static float4 gl_Position;
static int gl_VertexIndex;
static float2 frag_tex_coord;

struct SPIRV_Cross_Input
{
    uint gl_VertexIndex : SV_VertexID;
};

struct SPIRV_Cross_Output
{
    float2 frag_tex_coord : TEXCOORD0;
    float4 gl_Position : SV_Position;
};

void vert_main()
{
    gl_Position = float4(_25[gl_VertexIndex], 0.0f, 1.0f);
    frag_tex_coord = _45[gl_VertexIndex];
    gl_Position.y = -gl_Position.y;
    gl_Position.z = (gl_Position.z + gl_Position.w) * 0.5;
}

SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
{
    gl_VertexIndex = int(stage_input.gl_VertexIndex);
    vert_main();
    SPIRV_Cross_Output stage_output;
    stage_output.gl_Position = gl_Position;
    stage_output.frag_tex_coord = frag_tex_coord;
    return stage_output;
}
*/
static const uint8_t post_process_hlsl_vert[] = {
	0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x63,0x6f,0x6e,0x73,0x74,0x20,0x66,0x6c,0x6f,
	0x61,0x74,0x32,0x20,0x5f,0x32,0x35,0x5b,0x34,0x5d,0x20,0x3d,0x20,0x7b,0x20,0x28,
	0x2d,0x31,0x2e,0x30,0x66,0x29,0x2e,0x78,0x78,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,
	0x32,0x28,0x31,0x2e,0x30,0x66,0x2c,0x20,0x2d,0x31,0x2e,0x30,0x66,0x29,0x2c,0x20,
	0x66,0x6c,0x6f,0x61,0x74,0x32,0x28,0x2d,0x31,0x2e,0x30,0x66,0x2c,0x20,0x31,0x2e,
	0x30,0x66,0x29,0x2c,0x20,0x31,0x2e,0x30,0x66,0x2e,0x78,0x78,0x20,0x7d,0x3b,0x0a,
	0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x63,0x6f,0x6e,0x73,0x74,0x20,0x66,0x6c,0x6f,
	0x61,0x74,0x32,0x20,0x5f,0x34,0x35,0x5b,0x34,0x5d,0x20,0x3d,0x20,0x7b,0x20,0x30,
	0x2e,0x30,0x66,0x2e,0x78,0x78,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x28,0x31,
	0x2e,0x30,0x66,0x2c,0x20,0x30,0x2e,0x30,0x66,0x29,0x2c,0x20,0x66,0x6c,0x6f,0x61,
	0x74,0x32,0x28,0x30,0x2e,0x30,0x66,0x2c,0x20,0x31,0x2e,0x30,0x66,0x29,0x2c,0x20,
	0x31,0x2e,0x30,0x66,0x2e,0x78,0x78,0x20,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x61,0x74,
	0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,
	0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x69,0x6e,
	0x74,0x20,0x67,0x6c,0x5f,0x56,0x65,0x72,0x74,0x65,0x78,0x49,0x6e,0x64,0x65,0x78,
	0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,
	0x66,0x72,0x61,0x67,0x5f,0x74,0x65,0x78,0x5f,0x63,0x6f,0x6f,0x72,0x64,0x3b,0x0a,
	0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,
	0x6f,0x73,0x73,0x5f,0x49,0x6e,0x70,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,
	0x75,0x69,0x6e,0x74,0x20,0x67,0x6c,0x5f,0x56,0x65,0x72,0x74,0x65,0x78,0x49,0x6e,
	0x64,0x65,0x78,0x20,0x3a,0x20,0x53,0x56,0x5f,0x56,0x65,0x72,0x74,0x65,0x78,0x49,
	0x44,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x53,0x50,
	0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,
	0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x66,0x72,
	0x61,0x67,0x5f,0x74,0x65,0x78,0x5f,0x63,0x6f,0x6f,0x72,0x64,0x20,0x3a,0x20,0x54,
	0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,
	0x6f,0x61,0x74,0x34,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,
	0x20,0x3a,0x20,0x53,0x56,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,
	0x7d,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x76,0x65,0x72,0x74,0x5f,0x6d,0x61,
	0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,
	0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,
	0x5f,0x32,0x35,0x5b,0x67,0x6c,0x5f,0x56,0x65,0x72,0x74,0x65,0x78,0x49,0x6e,0x64,
	0x65,0x78,0x5d,0x2c,0x20,0x30,0x2e,0x30,0x66,0x2c,0x20,0x31,0x2e,0x30,0x66,0x29,
	0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x74,0x65,0x78,0x5f,0x63,
	0x6f,0x6f,0x72,0x64,0x20,0x3d,0x20,0x5f,0x34,0x35,0x5b,0x67,0x6c,0x5f,0x56,0x65,
	0x72,0x74,0x65,0x78,0x49,0x6e,0x64,0x65,0x78,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,
	0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x2e,0x79,0x20,0x3d,0x20,
	0x2d,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x2e,0x79,0x3b,0x0a,
	0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x2e,
	0x7a,0x20,0x3d,0x20,0x28,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,
	0x2e,0x7a,0x20,0x2b,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,
	0x2e,0x77,0x29,0x20,0x2a,0x20,0x30,0x2e,0x35,0x3b,0x0a,0x7d,0x0a,0x0a,0x53,0x50,
	0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,
	0x20,0x6d,0x61,0x69,0x6e,0x28,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,
	0x73,0x5f,0x49,0x6e,0x70,0x75,0x74,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,
	0x70,0x75,0x74,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x56,0x65,
	0x72,0x74,0x65,0x78,0x49,0x6e,0x64,0x65,0x78,0x20,0x3d,0x20,0x69,0x6e,0x74,0x28,
	0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x2e,0x67,0x6c,0x5f,0x56,
	0x65,0x72,0x74,0x65,0x78,0x49,0x6e,0x64,0x65,0x78,0x29,0x3b,0x0a,0x20,0x20,0x20,
	0x20,0x76,0x65,0x72,0x74,0x5f,0x6d,0x61,0x69,0x6e,0x28,0x29,0x3b,0x0a,0x20,0x20,
	0x20,0x20,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,
	0x74,0x70,0x75,0x74,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,
	0x74,0x3b,0x0a,0x20,0x20,0x20,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,
	0x70,0x75,0x74,0x2e,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,
	0x3d,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x20,
	0x20,0x20,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x2e,
	0x66,0x72,0x61,0x67,0x5f,0x74,0x65,0x78,0x5f,0x63,0x6f,0x6f,0x72,0x64,0x20,0x3d,
	0x20,0x66,0x72,0x61,0x67,0x5f,0x74,0x65,0x78,0x5f,0x63,0x6f,0x6f,0x72,0x64,0x3b,
	0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x73,0x74,0x61,0x67,
	0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x3b,0x0a,0x7d,0x0a
};

/*
cbuffer PostProcessData : register(b0)
{
    float4 _28_vignette_data : packoffset(c0);
    uint _28_enable_vignette : packoffset(c1);
};

Texture2D<float4> tex_sampler : register(t0);
SamplerState _tex_sampler_sampler : register(s0);

static float2 frag_tex_coord;
static float4 out_color;

struct SPIRV_Cross_Input
{
    float2 frag_tex_coord : TEXCOORD0;
};

struct SPIRV_Cross_Output
{
    float4 out_color : SV_Target0;
};

void frag_main()
{
    float2 uv = frag_tex_coord;
    float3 color = tex_sampler.Sample(_tex_sampler_sampler, uv).xyz;
    if (_28_enable_vignette != 0u)
    {
        float2 centered_uv = uv - 0.5f.xx;
        float dist = length(centered_uv);
        float vignette = smoothstep(0.699999988079071044921875f, 0.5f, dist);
        float factor = lerp(1.0f, vignette, _28_vignette_data.w);
        color = lerp(_28_vignette_data.xyz, color, factor.xxx);
    }
    out_color = float4(color, 1.0f);
}

SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
{
    frag_tex_coord = stage_input.frag_tex_coord;
    frag_main();
    SPIRV_Cross_Output stage_output;
    stage_output.out_color = out_color;
    return stage_output;
}
*/
static const uint8_t post_process_hlsl_frag[] = {
	0x63,0x62,0x75,0x66,0x66,0x65,0x72,0x20,0x50,0x6f,0x73,0x74,0x50,0x72,0x6f,0x63,
	0x65,0x73,0x73,0x44,0x61,0x74,0x61,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,
	0x65,0x72,0x28,0x62,0x30,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,
	0x61,0x74,0x34,0x20,0x5f,0x32,0x38,0x5f,0x76,0x69,0x67,0x6e,0x65,0x74,0x74,0x65,
	0x5f,0x64,0x61,0x74,0x61,0x20,0x3a,0x20,0x70,0x61,0x63,0x6b,0x6f,0x66,0x66,0x73,
	0x65,0x74,0x28,0x63,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x75,0x69,0x6e,0x74,
	0x20,0x5f,0x32,0x38,0x5f,0x65,0x6e,0x61,0x62,0x6c,0x65,0x5f,0x76,0x69,0x67,0x6e,
	0x65,0x74,0x74,0x65,0x20,0x3a,0x20,0x70,0x61,0x63,0x6b,0x6f,0x66,0x66,0x73,0x65,
	0x74,0x28,0x63,0x31,0x29,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x54,0x65,0x78,0x74,0x75,
	0x72,0x65,0x32,0x44,0x3c,0x66,0x6c,0x6f,0x61,0x74,0x34,0x3e,0x20,0x74,0x65,0x78,
	0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,
	0x74,0x65,0x72,0x28,0x74,0x30,0x29,0x3b,0x0a,0x53,0x61,0x6d,0x70,0x6c,0x65,0x72,
	0x53,0x74,0x61,0x74,0x65,0x20,0x5f,0x74,0x65,0x78,0x5f,0x73,0x61,0x6d,0x70,0x6c,
	0x65,0x72,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x20,0x3a,0x20,0x72,0x65,0x67,
	0x69,0x73,0x74,0x65,0x72,0x28,0x73,0x30,0x29,0x3b,0x0a,0x0a,0x73,0x74,0x61,0x74,
	0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x66,0x72,0x61,0x67,0x5f,0x74,
	0x65,0x78,0x5f,0x63,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,
	0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x6f,0x75,0x74,0x5f,0x63,0x6f,0x6c,0x6f,
	0x72,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x53,0x50,0x49,0x52,0x56,
	0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x49,0x6e,0x70,0x75,0x74,0x0a,0x7b,0x0a,0x20,
	0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x66,0x72,0x61,0x67,0x5f,0x74,
	0x65,0x78,0x5f,0x63,0x6f,0x6f,0x72,0x64,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,
	0x4f,0x52,0x44,0x30,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,
	0x20,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,
	0x70,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,
	0x20,0x6f,0x75,0x74,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3a,0x20,0x53,0x56,0x5f,
	0x54,0x61,0x72,0x67,0x65,0x74,0x30,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x76,0x6f,0x69,
	0x64,0x20,0x66,0x72,0x61,0x67,0x5f,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,
	0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x75,0x76,0x20,0x3d,0x20,
	0x66,0x72,0x61,0x67,0x5f,0x74,0x65,0x78,0x5f,0x63,0x6f,0x6f,0x72,0x64,0x3b,0x0a,
	0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x63,0x6f,0x6c,0x6f,0x72,
	0x20,0x3d,0x20,0x74,0x65,0x78,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x2e,0x53,
	0x61,0x6d,0x70,0x6c,0x65,0x28,0x5f,0x74,0x65,0x78,0x5f,0x73,0x61,0x6d,0x70,0x6c,
	0x65,0x72,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x2c,0x20,0x75,0x76,0x29,0x2e,
	0x78,0x79,0x7a,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x32,0x38,
	0x5f,0x65,0x6e,0x61,0x62,0x6c,0x65,0x5f,0x76,0x69,0x67,0x6e,0x65,0x74,0x74,0x65,
	0x20,0x21,0x3d,0x20,0x30,0x75,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,
	0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x63,0x65,0x6e,
	0x74,0x65,0x72,0x65,0x64,0x5f,0x75,0x76,0x20,0x3d,0x20,0x75,0x76,0x20,0x2d,0x20,
	0x30,0x2e,0x35,0x66,0x2e,0x78,0x78,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
	0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x64,0x69,0x73,0x74,0x20,0x3d,0x20,0x6c,0x65,
	0x6e,0x67,0x74,0x68,0x28,0x63,0x65,0x6e,0x74,0x65,0x72,0x65,0x64,0x5f,0x75,0x76,
	0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
	0x20,0x76,0x69,0x67,0x6e,0x65,0x74,0x74,0x65,0x20,0x3d,0x20,0x73,0x6d,0x6f,0x6f,
	0x74,0x68,0x73,0x74,0x65,0x70,0x28,0x30,0x2e,0x36,0x39,0x39,0x39,0x39,0x39,0x39,
	0x38,0x38,0x30,0x37,0x39,0x30,0x37,0x31,0x30,0x34,0x34,0x39,0x32,0x31,0x38,0x37,
	0x35,0x66,0x2c,0x20,0x30,0x2e,0x35,0x66,0x2c,0x20,0x64,0x69,0x73,0x74,0x29,0x3b,
	0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x66,
	0x61,0x63,0x74,0x6f,0x72,0x20,0x3d,0x20,0x6c,0x65,0x72,0x70,0x28,0x31,0x2e,0x30,
	0x66,0x2c,0x20,0x76,0x69,0x67,0x6e,0x65,0x74,0x74,0x65,0x2c,0x20,0x5f,0x32,0x38,
	0x5f,0x76,0x69,0x67,0x6e,0x65,0x74,0x74,0x65,0x5f,0x64,0x61,0x74,0x61,0x2e,0x77,
	0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x63,0x6f,0x6c,0x6f,0x72,
	0x20,0x3d,0x20,0x6c,0x65,0x72,0x70,0x28,0x5f,0x32,0x38,0x5f,0x76,0x69,0x67,0x6e,
	0x65,0x74,0x74,0x65,0x5f,0x64,0x61,0x74,0x61,0x2e,0x78,0x79,0x7a,0x2c,0x20,0x63,
	0x6f,0x6c,0x6f,0x72,0x2c,0x20,0x66,0x61,0x63,0x74,0x6f,0x72,0x2e,0x78,0x78,0x78,
	0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,
	0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,
	0x63,0x6f,0x6c,0x6f,0x72,0x2c,0x20,0x31,0x2e,0x30,0x66,0x29,0x3b,0x0a,0x7d,0x0a,
	0x0a,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,
	0x70,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x28,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,
	0x72,0x6f,0x73,0x73,0x5f,0x49,0x6e,0x70,0x75,0x74,0x20,0x73,0x74,0x61,0x67,0x65,
	0x5f,0x69,0x6e,0x70,0x75,0x74,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,
	0x61,0x67,0x5f,0x74,0x65,0x78,0x5f,0x63,0x6f,0x6f,0x72,0x64,0x20,0x3d,0x20,0x73,
	0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x2e,0x66,0x72,0x61,0x67,0x5f,
	0x74,0x65,0x78,0x5f,0x63,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,
	0x72,0x61,0x67,0x5f,0x6d,0x61,0x69,0x6e,0x28,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
	0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,
	0x75,0x74,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x3b,
	0x0a,0x20,0x20,0x20,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,
	0x74,0x2e,0x6f,0x75,0x74,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x6f,0x75,
	0x74,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,
	0x75,0x72,0x6e,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,
	0x3b,0x0a,0x7d,0x0a
};

static inline const mg_shader get_post_process_shader(mg_renderer_type type) {
    mg_shader shader = {0};
    switch (type) {
        case MG_RENDERER_TYPE_VULKAN:
            shader.vertex = (mg_shader_source){.code = post_process_spirv_vert, .size = sizeof(post_process_spirv_vert)};
            shader.fragment = (mg_shader_source){.code = post_process_spirv_frag, .size = sizeof(post_process_spirv_frag)};
            break;
        case MG_RENDERER_TYPE_DIRECT3D11:
            shader.vertex = (mg_shader_source){.code = post_process_hlsl_vert, .size = sizeof(post_process_hlsl_vert)};
            shader.fragment = (mg_shader_source){.code = post_process_hlsl_frag, .size = sizeof(post_process_hlsl_frag)};
            break;
        case MG_RENDERER_TYPE_OPENGL:
            shader.vertex = (mg_shader_source){.code = post_process_glsl_vert, .size = sizeof(post_process_glsl_vert)};
            shader.fragment = (mg_shader_source){.code = post_process_glsl_frag, .size = sizeof(post_process_glsl_frag)};
            break;
        case MG_RENDERER_TYPE_OPENGLES:
            shader.vertex = (mg_shader_source){.code = post_process_glsles_vert, .size = sizeof(post_process_glsles_vert)};
            shader.fragment = (mg_shader_source){.code = post_process_glsles_frag, .size = sizeof(post_process_glsles_frag)};
            break;
    }

    shader.uniform_blocks[0].name = "PostProcessData";
    shader.uniform_blocks[0].binding = 0;
    shader.sampled_image_name = "tex_sampler";
    return shader;
}

